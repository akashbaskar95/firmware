###############################################################################

# Define the CC2538 library
LIBCC2538_NAME   = libcc2538
LIBCC2538_LIB    = $(LIBCC2538_NAME).a
LIBCC2538_PATH   = $(CPU_SRC)/$(LIBCC2538_NAME)
LIBCC2538_SRC    = $(LIBCC2538_PATH)/src
LIBCC2538_INC    = $(LIBCC2538_PATH)/inc
LIBCC2538_PYTHON = python
LIBCC2538_SCRIPT = $(LIBCC2538_NAME).py

# Append to the include path
INC_PATH += -I $(LIBCC2538_SRC)
INC_PATH += -I $(LIBCC2538_INC)

# Extend the virtual path
VPATH += $(LIBCC2538_SRC) $(LIBCC2538_INC)

###############################################################################

# Define options passed to the C compiler
DOPTIONS += -DNO_CLOCK_DIVIDER_RESTORE

###############################################################################

CPU_PREFIX = arm-none-eabi

# Toolchain executables
CC      = $(CPU_PREFIX)-gcc
CPP     = $(CPU_PREFIX)-g++
AS      = $(CPU_PREFIX)-as
LD      = $(CPU_PREFIX)-ld
GDB     = $(CPU_PREFIX)-gdb
OBJCOPY = $(CPU_PREFIX)-objcopy
OBJSIZE = $(CPU_PREFIX)-size

###############################################################################

# C compiling flags
CFLAGS += -mthumb -mcpu=cortex-m3 -mlittle-endian
CFLAGS += -ffunction-sections -fdata-sections -fno-strict-aliasing
CFLAGS += -fshort-enums -fomit-frame-pointer
CFLAGS += -std=c99
CFLAGS += -Wall -pedantic -Wstrict-prototypes
CFLAGS += -O0
CFLAGS += -g -ggdb
CFLAGS += $(DOPTIONS)

# C++ compiling flags
CPPFLAGS += -mthumb -mcpu=cortex-m3 -mlittle-endian
CPPFLAGS += -ffunction-sections -fdata-sections -fno-strict-aliasing
CPPFLAGS += -fshort-enums -fomit-frame-pointer
CPPFLAGS += -fno-unwind-tables
CPPFLAGS += -fno-exceptions
CPPFLAGS += -fno-builtin
CPPFLAGS += -fno-rtti
CPPFLAGS += -std=c++11
CPPFLAGS += -Wall -pedantic
CPPFLAGS += -O0
CPPFLAGS += -g -ggdb
CPPFLAGS += $(DOPTIONS)

# Linker flags
LDFLAGS += -mthumb -mcpu=cortex-m3 -mlittle-endian
LDFLAGS += -Wl,--gc-sections
LDFLAGS += -Wl,--defsym -Wl,__cxa_pure_virtual=0

# Binary flags
OBJCOPY_FLAGS += --gap-fill 0xFF
OBJDUMP_FLAGS += --disassemble --source --disassembler-options=force-thumb

# Makefile flags
MAKEFLAGS = -j1

###############################################################################

# Append to the files to compile
SRC_FILES += Board.cpp InterruptHandler.cpp Gpio.cpp GpioAdc.cpp GpioIn.cpp \
             GpioInPow.cpp GpioOut.cpp GpioUart.cpp GpioI2c.cpp GpioSpi.cpp \
             Uart.cpp I2c.cpp Spi.cpp Timer.cpp GpioPwm.cpp Radio.cpp Watchdog.cpp \
             SysTick.cpp SleepTimer.cpp RadioTimer.cpp

# Append the startup code to the files to compile
SRC_FILES += cc2538_startup.c cc2538_system.c

# Linker script
LINKER_SCRIPT = $(CPU_SRC)/cc2538_linker.lds

# Linker directories and libraries
LINKER_DIRS += -L$(CPU_SRC)
LINKER_LIBS += -lcc2538

###############################################################################

# Check if BSL has been defined, if not give it a default value
ifndef BSL
BSL_BOARD = openbase
else
BSL_BOARD = $(BSL)
endif

###############################################################################

# Configure the Segger J-Link
JLINK_NAME = JLinkGDBServer
JLINK_PATH = /opt/segger/JLink
JLINK_OPT  = -device
JLINK_DEV  = CC2538SF53

# Configure the GDB client
GDB_FILE  = cc2538_gdb.gdb
GDB_BATCH = --batch 
GDB_CMD   = --command
GDB_EXT   = elf

# Configure the GDB
NEMIVER_NAME = nemiver
NEMIVER_IP   = localhost:2331
NEMIVER_GDB  = `which arm-none-eabi-gdb`
NEMIVER_EXT  = elf

# Configure the BSL client
BSL_PYTHON = python
BSL_NAME   = openmote-bsl.py
BSL_PATH   = $(PROJECT_HOME)/tools/openmote-bsl
BSL_OPT    = --board $(BSL)
BSL_EXT    = hex

###############################################################################

.PHONY: libcc2538 jlink load debug bsl

check:
# Check if LIBCC2537 exists
ifeq ("$(wildcard $(CPU_SRC)/$(LIBCC2538_LIB))","")
	$(error "Error! $(LIBCC2538_LIB) does not exist. Please run 'make BOARD=OpenMote-cc2538 libcc2538'" to generate it)
endif

libcc2538:
	@echo "Generating the CC2538 library..."
	@cd $(LIBCC2538_PATH); $(LIBCC2538_PYTHON) $(LIBCC2538_SCRIPT)

jlink:
	@echo "Initializing Segger J-Link..."
	@$(JLINK_PATH)/$(JLINK_NAME) $(JLINK_OPT) $(JLINK_DEV)

load:
	@echo "Loading $(PROJECT_NAME) into target..."
	@$(GDB) $(GDB_BATCH) $(GDB_CMD)=$(CPU_SRC)/$(GDB_FILE) $(PROJECT_NAME).$(GDB_EXT)

debug:
	@echo "Debugging $(PROJECT_NAME) into target..."
	@$(GDB) $(GDB_CMD)=$(CPU_SRC)/$(GDB_FILE) $(PROJECT_NAME).$(GDB_EXT)

nemiver: load
	@echo "Launching debugger..."
	@$(NEMIVER_NAME) --remote=$(NEMIVER_IP) --gdb-binary=$(NEMIVER_GDB) $(PROJECT_NAME).$(NEMIVER_EXT)

bsl:
	@echo "Loading $(PROJECT_NAME) into target..."
	@$(BSL_PYTHON) $(BSL_PATH)/$(BSL_NAME) $(PROJECT_NAME).$(BSL_EXT) $(BSL_OPT)

###############################################################################

