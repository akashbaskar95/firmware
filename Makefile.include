###############################################################################

# Toolchain executables
CC = arm-none-eabi-gcc
CPP = arm-none-eabi-g++
AS = arm-none-eabi-as
LD = arm-none-eabi-ld
GDB = arm-none-eabi-gdb
OBJCOPY = arm-none-eabi-objcopy
OBJSIZE = arm-none-eabi-size

###############################################################################

#define the board subdirectory
BOARD_NAME = board
BOARD_PATH = $(PROJECT_HOME)/$(BOARD_NAME)

# Define the core subdirectory
CORE_NAME = core
CORE_PATH = $(PROJECT_HOME)/$(CORE_NAME)

# Define the cpu subdirectory
CPU_NAME = cpu
CPU_PATH = $(PROJECT_HOME)/$(CPU_NAME)

# Define the drivers subdirectory
DRIVERS_NAME = drivers
DRIVERS_PATH = $(PROJECT_HOME)/$(DRIVERS_NAME)

# Define the kernel subdirectory
KERNEL_NAME = kernel
KERNEL_PATH = $(PROJECT_HOME)/$(KERNEL_NAME)

# Define the net subdirectory
NET_NAME = net
NET_PATH = $(PROJECT_HOME)/$(NET_NAME)

# Define the sys subdirectory
SYS_NAME = sys
SYS_PATH = $(PROJECT_HOME)/$(SYS_NAME)

###############################################################################

# Include the names of the source files to compile
SRC_FILES += $(PROJECT_FILES)

# Define the name and path where the temporary object files are stored
BIN_PATH = bin

# Coverts the source files (c and cpp) to object files (o) to be used as targets
TMP_FILES += $(patsubst %.c, %.o, ${SRC_FILES})
TMP_FILES += $(patsubst %.cpp, %.o, ${SRC_FILES})

# Filters out the source files (c and cpp) from the object files (o) to be compiled
BIN_FILES = $(filter-out %.c %.cpp %.h, $(TMP_FILES))

# Adds the path to where the object files need to be stored
BIN_TARGET = $(addprefix $(BIN_PATH)/, $(BIN_FILES))

###############################################################################

# Include the board makefiles
ifeq ($(USE_BOARD), TRUE)
    include $(BOARD_PATH)/Makefile.include
    INC_PATH += -I $(BOARD_PATH)
    VPATH += $(BOARD_PATH)
endif

# Include the cpu makefiles
ifeq ($(USE_CPU), TRUE)
    include $(CPU_PATH)/Makefile.include
    INC_PATH += -I $(CPU_PATH)
    VPATH += $(CPU_PATH)
endif

# Include the core makefiles
ifeq ($(USE_CORE), TRUE)
    include $(CORE_PATH)/Makefile.include
    INC_PATH += -I $(CORE_PATH)
    VPATH += $(CORE_PATH)
endif

# Include the drivers makefiles
ifeq ($(USE_DRIVERS), TRUE)
    include $(DRIVERS_PATH)/Makefile.include
    INC_PATH += -I $(DRIVERS_PATH)
    VPATH += $(DRIVERS_PATH)
endif

# Decide if we need to include the kernel makefile
ifeq ($(USE_KERNEL), TRUE)
    include $(KERNEL_PATH)/Makefile.include
    INC_PATH += -I $(KERNEL_PATH)
    VPATH += $(KERNEL_PATH)
endif

# Decide if we need to include the sys makefile
ifeq ($(USE_NET), TRUE)
    include $(NET_PATH)/Makefile.include
    INC_PATH += -I $(NET_PATH)
    VPATH += $(NET_PATH)
endif

# Decide if we need to include the sys makefile
ifeq ($(USE_SYS), TRUE)
    include $(SYS_PATH)/Makefile.include
    INC_PATH += -I $(SYS_PATH)
    VPATH += $(SYS_PATH)
endif

###############################################################################

.DEFAULT_GOAL = all

.PHONY: all
all: check pre build post stats

pre:
	@echo "Building '$(PROJECT_NAME)' project..."
	@mkdir -p $(BIN_PATH)
	
build: $(BIN_TARGET)

post: $(PROJECT_NAME).hex $(PROJECT_NAME).bin
	@echo "Building '$(PROJECT_NAME)' done."
    
stats: $(PROJECT_NAME).elf
	@-$(OBJSIZE) $(PROJECT_NAME).elf

$(PROJECT_NAME).bin: $(PROJECT_NAME).elf
	@-$(OBJCOPY) -O ihex $< $@

$(PROJECT_NAME).hex: $(PROJECT_NAME).elf
	@-$(OBJCOPY) -O binary $(OBJCOPY_FLAGS) $< $@

$(PROJECT_NAME).elf: $(BIN_TARGET)
	@echo "Linking '$(PROJECT_NAME)'..."
	@-$(CPP) $(LDFLAGS) -T$(LINKER_SCRIPT) -o $@ $^ $(LINKER_DIRS) $(LINKER_LIBS)

.PHONY: clean
clean:
	@echo "Cleaning '$(PROJECT_NAME)' project..."
	@rm -f $(BIN_PATH)/*.*
	@rm -f $(PROJECT_NAME)
	@rm -f *.bin *.elf *.hex .map

###############################################################################

# Target to compile C files into object files
$(BIN_PATH)/%.o: %.c
	@echo "Compiling $<..."
	@-$(CC) $(CFLAGS) $(INC_PATH) -c $< -o $@

# Target to compile C++ files into object files
$(BIN_PATH)/%.o: %.cpp
	@echo "Compiling $<..."
	@-$(CPP) $(CPPFLAGS) $(INC_PATH) -c $< -o $@

###############################################################################

